import requests
import json
import os
from typing import Optional, List, Union
from tenacity import retry, stop_after_attempt, wait_fixed

import dotenv

from schemas import Digest


dotenv.load_dotenv()


class TelegramBot:
    def __init__(self, token: str):
        self.token = token
        self.base_url = f"https://api.telegram.org/bot{token}"

    @retry(stop=stop_after_attempt(3), wait=wait_fixed(3))
    def send_message(
        self,
        chat_id: Union[int, str],
        text: str,
        parse_mode: Optional[str] = None,
        reply_markup: Optional[dict] = None,
    ) -> dict:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

        Args:
            chat_id: ID —á–∞—Ç–∞ –∏–ª–∏ username
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (HTML, Markdown)
            reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–ª–∏ inline-–∫–Ω–æ–ø–∫–∏
        """
        url = f"{self.base_url}/sendMessage"
        payload = {"chat_id": chat_id, "text": text}

        if parse_mode:
            payload["parse_mode"] = parse_mode
        if reply_markup:
            payload["reply_markup"] = json.dumps(reply_markup)

        response = requests.post(url, json=payload)
        response.raise_for_status()
        return response.json()

    def send_digest_message(self, chat_id: Union[int, str], digest: Digest) -> dict:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
        """
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self._format_digest_message(digest)

        return self.send_message(chat_id=chat_id, text=message, parse_mode="HTML")

    def _format_digest_message(self, digest: Digest) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ HTML
        """
        message = (
            f"""
<b>üìä –î–∞–π–¥–∂–µ—Å—Ç –ø—Ä–æ–¥–∞–∂</b>
–ü–µ—Ä–∏–æ–¥: {digest.start_dt.strftime('%d.%m.%Y')} - {digest.end_dt.strftime('%d.%m.%Y')}

<u>–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:</u>
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Å–¥–µ–ª–æ–∫: <b>{digest.created_leads}</b>
‚Ä¢ –ó–∞–∫—Ä—ã—Ç–æ —Å–¥–µ–ª–æ–∫: <b>{digest.closed_leads}</b>
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: <b>{digest.total_price:,.0f}‚ÇΩ</b>
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <b>{digest.avg_price:,.0f}‚ÇΩ</b>
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: <b>{digest.conversion:.1%}</b>
        """
            + f"""
<u>–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ:</u>
ü•á –õ–∏–¥–µ—Ä –ø—Ä–æ–¥–∞–∂: <b>{digest.best_seller.name}</b> ‚Äî {digest.best_seller.total_price:,.0f}‚ÇΩ
üìä –°–∞–º—ã–π –Ω–∏–∑–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{digest.worst_seller.name}</b> ‚Äî {digest.worst_seller.total_price:,.0f}‚ÇΩ
–û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã: <b>{digest.created_leads}</b> –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫
            """
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        message += "\n<u>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</u>\n"
        if digest.alerts:
            for alert in digest.alerts:
                message += f"‚Ä¢ {alert}\n"
        else:
            message += "–ü–∞–¥–µ–Ω–∏—è –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç"

        return message

    def send_message_with_keyboard(
        self, chat_id: Union[int, str], text: str, buttons: List[List[dict]]
    ) -> dict:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π

        Args:
            buttons: [[{text: "–ö–Ω–æ–ø–∫–∞ 1", callback_data: "data1"}], ...]
        """
        keyboard = {"inline_keyboard": buttons}

        return self.send_message(
            chat_id=chat_id, text=text, parse_mode="HTML", reply_markup=keyboard
        )


bot = TelegramBot(os.getenv("TELEGRAM_TOKEN"))
